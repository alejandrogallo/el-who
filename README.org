#+title: el-who: a HTML DSL compatible with cl-who

* Introduction

This package simplifies the creation of an HTML DSL using S
expressions, inspired by the common Lisp library CL-who.

Its primary goal is to facilitate sharing HTML snippets between
libraries, with compatibility as a key focus.

On another note, this library is exceptionally easy to write and
illustrates the usefulness of the =pcase= function in Emacs Lisp for
manipulating lists.

* Algorithm

Explanation of the algorithm is as follows
TODO

* Example

Check the tests for more examples but here are a couple:

** 1 A simple case
#+begin_src emacs-lisp :exports both :results default html replace value 
(let ((title "Some title"))
  (el-who
   `(:html
     (:head
      (:meta :charset "UTF-8")
      (:meta :name "apple-mobile-web-app-capable" :content "yes")
      (:meta :name "viewport" :content "width=device-width, initial-scale=1")
      (:title (identity title))
      (:script :src "https://cdn.jsdelivr.net/npm/interactjs/dist/interact.min.js")
      (:script :src "https://unpkg.com/htmx.org@1.9.10")
      (:script :src "https://cdn.jsdelivr.net/npm/jquery@3.6.3/dist/jquery.min.js")
      (:link :rel "stylesheet"
             :type "text/css"
             :href "https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css")
      (:link :rel "stylesheet"
             :type "text/css"
             :href "https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css")
      (:body
       (:h1 "Hello World")
       (:p "Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum
leo, quis tempor ligula erat quis odio.")

       (:div
        (:ul :class "list"
             (:li "Nam euismod tellus id erat.  ")
             (:li "Nullam rutrum.  ")
             (let ((name "üìò el-who"))
               (cl-loop for i below 3
                     collect `(:li :id ,i
                                   (format "%s üçè %s" ,i ,name)))))))))))
#+end_src

#+RESULTS:
#+begin_export html
<html>
<head>
<meta charset="UTF-8"></meta><meta name="apple-mobile-web-app-capable" content="yes"></meta><meta name="viewport" content="width=device-width, initial-scale=1"></meta><title>
Some title
</title><script src="https://cdn.jsdelivr.net/npm/interactjs/dist/interact.min.js"></script><script src="https://unpkg.com/htmx.org@1.9.10"></script><script src="https://cdn.jsdelivr.net/npm/jquery@3.6.3/dist/jquery.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"></link><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"></link><body>
<h1>
Hello World
</h1><p>
Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum
leo, quis tempor ligula erat quis odio.
</p><div>
<ul class="list">
<li>
Nam euismod tellus id erat.  
</li><li>
Nullam rutrum.  
</li><li id="0">
0 üçè üìò el-who
</li><li id="1">
1 üçè üìò el-who
</li><li id="2">
2 üçè üìò el-who
</li>
</ul>
</div>
</body>
</head>
</html>
#+end_export


** 2 =cl-who= compatibility

This showcases some https://edicl.github.io/cl-who/ compatibility.
The function =el-who-cl-who= performs the following substitutions

- =who:fmt= ‚áí =format=
- =who:str= ‚áí =identity=
- =who:htm= ‚áí =el-who-htm=
- =loop= ‚áí =cl-loop=

#+begin_src emacs-lisp :results replace value :wrap src html :output both

(let ((deck "üçé Deckoration"))
  (el-who-cl-who
   `(:div :class "card w-100"
          (who:fmt "The %s" deck)
          (:div :class "card-footer"
                (:form :method "POST"
                       :action "/grade"
                       (:input :name "card-id"
                               :value deck
                               :class "d-none invisible")
                       (:span :class "badge fs-7 bg-secondary"
                              (who:str deck))
                       (:div :class "btn-group float-end"
                             (loop for i below 5
                                   do
                                   (who:htm (:button :class "btn btn-primary"
                                                     :value i
                                                     :name "grade"
                                                     (who:str i))))))))))
#+end_src

#+RESULTS:
#+begin_src html
<div class="card w-100">
The üçé Deckoration<div class="card-footer">
<form method="POST" action="/grade">
<input name="card-id" value="üçé Deckoration" class="d-none invisible"/><span class="badge fs-7 bg-secondary">
üçé Deckoration
</span><div class="btn-group float-end">
<button class="btn btn-primary" value="0" name="grade">
0
</button><button class="btn btn-primary" value="1" name="grade">
1
</button><button class="btn btn-primary" value="2" name="grade">
2
</button><button class="btn btn-primary" value="3" name="grade">
3
</button><button class="btn btn-primary" value="4" name="grade">
4
</button>
</div>
</form>
</div>
</div>
#+end_src

